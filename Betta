#include <iostream>
#include <ctime>
#include <conio.h>

using namespace std;

class Matrix {

	class Node {

	public:
		const static int Size_row_column = 10;
		static int sum, quantity;
		static int qrow[Size_row_column], qcolumn[Size_row_column], index_row, index_column;
		static float average;
		int* row,* column, data;
		Node* left, * right, * top, * bottom;

		void Initialize(int userdata) {
			data = userdata;

			sum += data;
			quantity++;
			average = float(sum) / quantity;

			row = &qrow[index_row];
			column = &qcolumn[index_column];

			left = 0;
			right = 0;
			top = 0;
			bottom = 0;
		}

		Node(int userdata) {

			Initialize(userdata);
		}
		Node() {

			Initialize(rand() % 9 + 1);
		}
		~Node() {
			sum -= this->data;
			quantity--;

			average = float(sum) / quantity;
		}

		friend ostream& operator<<(ostream& out, const Node& point) {
			
			out << point.data;
			return out;
		}
		friend istream& operator>>(istream& in, Node& point) {

			point.sum -= point.data;

			in >> point.data;
			point.sum += point.data;
			point.average = float(point.sum) / point.quantity;

			return in;
		}

		Node& operator[](int column) {
			Node* node = this;
			for (int i = 0; i < column; i++) {
				node = node->right;
			}
			return *node;
		}
	};

	Node* head = 0, * tail = 0, * now = 0, * prev = 0, * head_row = 0, * head_column = 0, * up = 0;
	int size_row = 0, size_column = 0, for_fast = 0;

	void const ForPrint(Node* head_what, Node* head_or_tail, int size_what, char head_or_tail_direction, char now_direction, int number) {

		int local_sum = 0, local_quantity = 0;
		float local_average = 0;
	 
		head_what = head_or_tail;

		for (int i = 0; i < number - 1; i++) {

			switch (head_or_tail_direction)
			{
			case 'r' :
				head_what = head_what->right;
				break;
			case 'l':
				head_what = head_what->left;
				break;
			case 't':
				head_what = head_what->top;
				break;
			case 'b':
				head_what = head_what->bottom;
				break;
			default:
				break;
			}
		}

		now = head_what;
		for (int j = 0; j < size_what; j++) {

			cout << *now << ' ';

			local_sum += now->data;
			local_quantity++;

			switch (now_direction)
			{
			case 'r':
				now = now->right;
				break;
			case 'l':
				now = now->left;
				break;
			case 't':
				now = now->top;
				break;
			case 'b':
				now = now->bottom;
				break;
			default:
				break;
			}
		}
		local_average = (float)local_sum / local_quantity;

		cout << endl << "Сума: " << local_sum << endl << "Кількість комірок: " << local_quantity << endl << "Середне значеняя:  " << local_average << endl;
	}

	void ForNumberNode(int mas[], int number, int find, int do_what, int& index_what, int del_or_do) {
		int i;

		for (i = 0; i < Node::Size_row_column; i++) {
			if (mas[i] == find) break;
		}
		for (int j = 0; j < Node::Size_row_column; j++) {
			if (mas[j] >= number) mas[j] += do_what;
		}
		index_what = i;
		mas[i] = del_or_do;
	}

	void ForPop(int number, int qmas[], int& index_what, int size, Node* h_equal, Node* t_equal, char n_equal, int size_what, int n_not_equal_1, int n_not_equal_2, char direction_1, char direction_2, char now_direction) {
		
		ForNumberNode(qmas, number, number, -1, index_what, -1);
		
		Node* temp;
		now = head;

		if (number == 0) head = h_equal;
		else if (number == size - 1) tail = t_equal;

		for (int i = 0; i < number; i++) {

			if (n_equal == 'b') now = now->bottom;
			else if (n_equal == 'r')now = now->right;
		}

		for (int j = 0; j < size_what; j++) {

			if (number != n_not_equal_1) {

				if (direction_1 == 't') now->bottom->top = now->top;
				else if (direction_1 == 'r')now->left->right = now->right;
			}
			if (number != n_not_equal_2) {

				if (direction_2 == 'b') now->top->bottom = now->bottom;
				else if (direction_2 == 'l') now->right->left = now->left;
			}

			temp = now;
			if (now_direction == 'r')now = now->right;
			else if (now_direction == 'b')now = now->bottom;

			delete temp;
		}
	}
	
	void do_1(int row) {
		now = tail;
		for (int i = 0; i < size_row - row - 1; i++) {
			now = now->top;
		}
	}
	void do_2(int row) {
		now = head;

		for (int i = 0; i < row; i++) {
			now = now->bottom;
		}
	}
public:

	Matrix(int user_size_row = 2, int user_size_column = 2, bool automatic_initialization = true) {

		if (user_size_row > 10 || user_size_column > 10) return;

		int userdata = 0;
		int row = 0, column = 0;
		size_row = user_size_row;
		size_column = user_size_column;

		for (int i = 0; i < size_row; i++) {

			Node::qrow[i] = i;

			for (int j = 0; j < size_column; j++) {

				Node::qcolumn[j] = j;

				if (!automatic_initialization) {
					cout << "Введіть значення комірки " << i << ' ' << j << " : ";
					cin >> userdata;
				}
				else userdata = rand() % 9 + 1;

				if (i == 0) {
					if (j == 0) {
						now = new Node(userdata);
						head_row = now;
						head = now;
					}
					else {
						now->right = new Node(userdata);
						prev = now;
						now = prev->right;
						now->left = prev;
					}
				}
				else {
					if (j == 0) {

						now = new Node(userdata);
						now->top = head_row;
						up = head_row->right;
						head_row->bottom = now;
						head_row = now;
					}
					else {
						now->right = new Node(userdata);
						prev = now;
						now = prev->right;
						now->left = prev;
						now->top = up;
						up->bottom = now;
						up = up->right;
					}
				}
				Node::index_column++;
			}
			Node::index_column = 0;
			Node::index_row++;
		}
		tail = now;
	}
	~Matrix() {

		Node* temp;
		now = head;
		head_row = head;

		for (int i = 0; i < size_row; i++) {
			head_row = head_row->bottom;

			for (int j = 0; j < size_column; j++) {

				temp = now;
				now->left = 0;
				if(i != size_row-1) now->bottom->top = 0;			
				now->bottom = 0;
				now = now->right;

				delete temp;
			}
			now = head_row;
		}
	}

	void const Print() {

		cout << *this << endl << "Сума: " << Node::sum << endl << "Кількість комірок: " << Node::quantity << endl << "Середне значеняя:  " << Node::average << endl;
	}

	void const Filter(int multiple) {

		head_row = head;
		int local_sum = 0, local_quantity = 0;
		float local_average = 0;

		for (int i = 0; i < size_row; i++) {

			now = head_row;
			head_row = head_row->bottom;

			for (int j = 0; j < size_column; j++) {

				if (now->data % multiple == 0) {
					cout << *now << ' ';
					local_sum += now->data;
					local_quantity++;
				}
				else cout << ". ";

				now = now->right;
			}
			cout << endl;
		}
		if (local_quantity == 0) local_average = 0;
		else local_average = (float)local_sum / local_quantity;
		
		cout << endl << "Сума: " << local_sum << endl << "Кількість комірок: " << local_quantity << endl << "Середне значеняя:  " << local_average;
	}

	void const AllAboutNode(int row, int column) {

		Node temp = Find(row, column);
		cout << "Значення: " << temp << '\t' << "Рядок: " << *temp.row << '\t' << "Стовпчик: " << *temp.column;
	}

	bool const PrintRow(int number) {

		if (number > size_row || number < 0) return false;

		ForPrint(head_row, head, size_column, 'b', 'r', number + 1);
	}

	bool const PrintColumn(int number) {

		if (number > size_column || number < 0) return false;

		ForPrint(head_column, head, size_row, 'r', 'b', number + 1);
	}

	bool const ReversePrintRow(int number) {

		if (number > size_row || number < 0) return false;

		ForPrint(head_row, tail, size_column, 't', 'l', size_row - number);
	}

	bool const ReversePrintColumn(int number) {

		if (number > size_column || number < 0) return false;

		ForPrint(head_column, tail, size_row, 'l', 't', size_column - number);
	}

	bool PopRow(int number) {

		if (number > size_row - 1 || number < 0 || size_row < 3) return false;

		ForPop(number, Node::qrow, Node::index_row, size_row, head->bottom, tail->top, 'b', size_column, size_row - 1, 0, 't', 'b', 'r');
		size_row--;
	}

	bool PopColumn(int number) {

		if (number > size_row - 1|| number < 0 || size_column < 3) return false;

		ForPop(number, Node::qcolumn, Node::index_column, size_column, head->right, tail->left, 'r', size_row, 0, size_column - 1, 'r', 'l','b');
		size_column--;
	}

	bool PushRow(int number) {

		if (number > size_row || number < 0 || size_row == 10) return false;

		ForNumberNode(Node::qrow, number, -1, 1, Node::index_row, number);

		Node* temp;

		if (number == 0) {
			now = head;

			now->top = new Node;
			prev = now;
			temp = now;
			now = now->top;
			head = now;
			now->bottom = prev;

			for (int i = 0; i < size_column - 1; i++) {
				temp = temp->right;

				now->right = new Node;
				prev = now;
				now = now->right;
				now->left = prev;
				temp->top = now;
				now->bottom = temp;
			}

		}
		else if (number == size_row) {
			now = tail;

			now->bottom = new Node;
			prev = now;
			temp = now;
			now = now->bottom;
			tail = now;
			now->top = prev;

			for (int i = 0; i < size_column - 1; i++) {
				temp = temp->left;

				now->left = new Node;
				prev = now;
				now = now->left;
				now->right = prev;
				temp->bottom = now;
				now->top = temp;
			}
		}
		else {
			now = head;

			for (int i = 0; i < number - 1; i++) now = now->bottom;

			temp = now->bottom;

			now->bottom = new Node;
			prev = now;
			now = now->bottom;

			now->top = prev;
			now->bottom = temp;
			temp->top = now;

			for (int i = 0; i < size_column - 1; i++) {
				temp = temp->right;
				prev = prev->right;

				now->right = new Node;
				now->right->left = now;

				now = now->right;

				now->top = prev;
				prev->bottom = now;

				now->bottom = temp;
				temp->top = now;
			}
		}
		size_row++;
	}

	bool PushColumn(int number){

		if (number > size_column || number < 0 || size_column == 10) return false;

		ForNumberNode(Node::qcolumn, number, -1, 1, Node::index_column, number);

		Node* temp;

		if (number == 0) {
			now = head;

			now->left = new Node;
			prev = now;
			temp = now;
			now = now->left;
			head = now;
			now->right = prev;

			for (int i = 0; i < size_row - 1; i++) {
				temp = temp->bottom;

				now->bottom = new Node;
				prev = now;
				now = now->bottom;
				now->top = prev;
				temp->left = now;
				now->right = temp;
			}

		}
		else if (number == size_column ) {
			now = tail;

			now->right = new Node;
			prev = now;
			temp = now;
			now = now->right;
			tail = now;
			now->left = prev;

			for (int i = 0; i < size_row - 1; i++) {
				temp = temp->top;

				now->top = new Node;
				prev = now;
				now = now->top;
				now->bottom = prev;
				temp->right = now;
				now->left = temp;
			}
		}
		else {

			now = head;

			for (int i = 0; i < number - 1; i++) now = now->right;

			temp = now->right;
			now->right = new Node;
			prev = now;
			now = now->right;

			now->left = prev;
			now->right = temp;
			temp->left = now;

			for (int i = 0; i < size_row - 1; i++) {

				temp = temp->bottom;
				prev = prev->bottom;

				now->bottom = new Node;
				now->bottom->top = now;
				now = now->bottom;

				now->right = temp;
				temp->left = now;

				now->left = prev;
				prev->right = now;
			}
		}
		size_column++;
	}

	void static Info(){
		cout << "Автор: Шаронова Вероніка \nГрупа: ОПК-311 \nРік: 2023 \nМета: здобути досвід написання прикладних програм \nОпис: программа дозволяє бвзово керувати імітацією матриці. Серед можливостей: створення матриці, ручна та автоматична ініціалізація елементів, видалення та створення колонок та рядків, вивід на екран даних окремо або разом, т.д. ";
	}

	Node Find(int row, int column) {

		if (row > size_row / 2 && column > size_column / 2) {
			do_1(row);
		}
		else if(row <= size_row / 2 && column <= size_column / 2) {
			do_2(row);
		}
		else {
			if (size_row >= size_column) {
				do_2(row);
			}
			else {
				
				do_1(row);
			}
		}
		
		if (now->left == 0) {
			for (int i = 0; i < column; i++) {
				now = now->right;
			}
		}
		else if (now->right == 0) {
			for (int i = 0; i < size_column - column - 1; i++) {
				now = now->left;
			}
		}
		
		return *now;
	}

	

	int GetSizeRow() {
		return size_row;
	}

	int GetSizeColumn() {
		return size_column;
	}

	Node& operator[](int row) {
		now = head;
		for (int i = 0; i < row; i++) {
			now = now->bottom;
		}
		return *now;
	}

	friend ostream& operator<<(ostream& out, Matrix& point) {
		point.head_row = point.head;

		for (int i = 0; i < point.size_row; i++) {

			point.now = point.head_row;
			point.head_row = point.head_row->bottom;

			for (int j = 0; j < point.size_column; j++) {

				out << *point.now << ' ';
				point.now = point.now->right;
			}
			out << endl;
		}
		return out;
	}

};
int Matrix::Node::quantity = 0;
float Matrix::Node::average = 0;
int Matrix::Node::sum = 0;
int Matrix::Node::qrow[Size_row_column]{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
int Matrix::Node::qcolumn[Size_row_column]{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
int Matrix::Node::index_row = 0;
int Matrix::Node::index_column = 0;

void ChoiceToDo(int& choice, int edge) {
	do {

		cout << endl << "Оберіть дію: ";
		cin >> choice;

	} while (choice < 0 || choice > edge);
}

void ChoicwRowColumn(int& row, int& column, int sizerow, int sizecolumn) {
	do {

		cout << endl << "Номер рядку: ";
		cin >> row;

		cout << "Номер стовпчику: ";
		cin >> column;

	} while (row < 0 || row > sizerow || column < 0 || column > sizecolumn);
}

void main() {

	system("chcp 1251");
	system("cls");
	srand(time(0));
	
	int choice, sizerow, sizecolumn, row, column;

	cout << "Вітаю! Ця програма дозволить Вам покерувати двовимірним списком. Але спочатку його треба створити. Для цього оберіть розмір списку та тип ініціалізації елементів.\n\n!!!На розмір списку накладено обмеження: не меньше 2х2 та не більше 10х10!!!\n\nБудь-які некоректно введені дані програма буде запитувати повторно.\n" << endl;
	
	do {
		cout << "Оберіть тип ініціалізації(вручну - 0 або автоматично - 1): ";
		cin >> choice;

	} while (choice != 1 && choice != 0);

	do {
		cout << "Оберіть кількість рядків: ";
		cin >> sizerow;

		cout << "Оберіть кількість стовпчиків: ";
		cin >> sizecolumn;

	} while (sizerow > 10 || sizerow < 2 || sizecolumn > 10 || sizecolumn < 2);

	Matrix list(sizerow, sizecolumn, choice);

	do {

		system("cls");

		cout << list << endl << endl;

		cout << "Ви можете: \n1 - перейти до дій з матрицею \n2 - перейти до керування елементами \n3 - перейти до керування рядками \n4 - перейти до керування стовпчиками \n5 - вивести інформацію про автора класу" << endl;
		
		do {

			cout << endl << "Оберіть дію: ";
			cin >> choice;

		} while (choice < 0 || choice > 5);

		switch (choice)
		{
		case 1:

			system("cls");
			cout << list << endl << endl;
			cout << "Ви можете: \n1 - вивести повну інформацію про матрицю \n2 - відфільтрувати елементи кратні числу" << endl;
			
			ChoiceToDo(choice, 2);

			switch (choice)
			{
			case 1:
				system("cls");
				list.Print();
				break;

			case 2:
				
				cout << "Введіть число котрому повинні бути кратні елементи: ";
				cin >> choice;
				system("cls");
				list.Filter(choice);
				break;

			default:
				break;
			}
			break;

		case 2:
			system("cls");
			cout << list << endl << endl;
			cout << "Ви можете: \n1 - вивести елемент \n2 - вивести повну інформацію про елемент \n3 - змінити значення елементу" << endl;
			
			ChoiceToDo(choice, 3);
			
			ChoicwRowColumn(row, column, sizerow, sizecolumn);

			switch (choice)
			{
			case 1:
				cout << "Ваш елемент: " << list[row][column];
				break;

			case 2:
				cout << endl;
				list.AllAboutNode(row, column);
				break;

			case 3:
				cout << "Введіть нове значення елементу: ";
				cin >> list[row][column];
				break;
			default:
				break;
			}
			break;

		case 3:
			system("cls");
			cout << list << endl << endl;
			cout << "Ви можете: \n1 - вивести певний рядок у прямому порядку \n2 - вивести певний рядок у зворотньому порядку \n3 - додати рядок \n4 - видалити рядок" << endl;
			
			ChoiceToDo(choice, 4);

			do {

				cout << "Оберіть номер рядку: ";
				cin >> row;

			} while (row < 0 || row > sizerow);

			switch (choice)
			{
			case 1:
				list.PrintRow(row);
				break;

			case 2:
				list.ReversePrintRow(row);
				break;

			case 3:
				if (!list.PushRow(row)) cout << "Список переповненно!";
				else sizerow++;
				break;

			case 4:
				if (!list.PopRow(row)) cout << "Спискок занадто малий!";
				else sizerow--;
				break;

			default:
				break;
			}
			break;

		case 4:
			system("cls");
			cout << list << endl << endl;
			cout << "Ви можете: \n1 - вивести певний стовпчик у прямому порядку \n2 - вивести певний стовпчик у зворотньому порядку \n3 - додати стовпчик \n4 - видалити стовпчик" << endl;

			ChoiceToDo(choice, 4);

			do {

				cout << "Оберіть номер стовпчику: ";
				cin >> column;

			} while (column < 0 || column > sizecolumn);

			switch (choice)
			{
			case 1:
				list.PrintColumn(column);
				break;

			case 2:
				list.ReversePrintColumn(column);
				break;

			case 3:
				if (!list.PushColumn(column)) cout << "Список переповненно!";
				else sizecolumn++;
				break;

			case 4:
				if (!list.PopColumn(column)) cout << "Спискок занадто малий!";
				else sizecolumn--;
				break;

			default:
				break;
			}
			break;

		case 5:
			Matrix::Info();
			break;

		default:
			break;
		}
		
		cout << endl << endl << "Щоб вийти натисніть Esc. Для продовження натисніть будь яку клавішу...";
	} while (_getch() != 27);
	
}

/*
Вариант №40: Двумерный список
Обязательные поля:
? Номер строки (назначается автоматически);
? Номер столбца (назначается автоматически);
? Значение ячейки (считывается из файла или задаётся случайно);
? Сумма всех значений ячеек;
? Среднее значение всех ячеек;
? Счётчик количества ячеек.
Возможности класса:
? Автоматическая инициализация при создании экземпляра;
? Возможность ручной инициализации значения ячеек;
? Вывод данных на экран;
? Ручная смена значения ячейки с пересчётом зависимых полей.
Возможности программы:
? Выбор размера «массива» (не более 10х10);
? Вывод всех экземпляров;
? Вывод одного экземпляра с заданным расположением;
? Вывод выбранной строки или столбца в прямом и обратном направлении с подсчётом суммы и среднего выведенных значений;
? Фильтр вывода экземпляров (например только чётные, больше 5 и пр.);
? Поиск кратчайшего пути до выбранного экземпляра;
? Добавление/удаление строк и столбцов;
? Меню пользователя, позволяющее использовать все возможности программы и класса, узнать информацию об авторе, а также выйти из программы.
Требования к программе:
? Организация данных в виде созданного вручную списка;
? Каждая ячейка должна иметь связь с каждой соседней (т.е. 4 связи);
? Обязательное использование принципов ООП (особенно инкапсуляции);
? Максимально предусмотренные ошибки пользователя;
? Использование статических методов, константных методов, и параметров по умолчанию;
? Перегрузка квадратных скобочек для работы со списком;
? Красивое оформление.

*/
