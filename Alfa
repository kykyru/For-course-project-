#include <iostream>  // подкорректировать номера и добавить по фронт и бек  и обьединить
#include <ctime>
#include <conio.h>

using namespace std;

class Matrix {

	class Node {

	public:
		const static int Size_row_column = 10;
		static int sum, quantity;
		static int qrow[Size_row_column], qcolumn[Size_row_column], index_row, index_column;
		static float average;
		int* row,* column, data;
		Node* left, * right, * top, * bottom;

		void Initialize(int userdata) {
			data = userdata;

			sum += data;
			quantity++;
			average = float(sum) / quantity;

			row = &qrow[index_row];
			column = &qcolumn[index_column];

			left = 0;
			right = 0;
			top = 0;
			bottom = 0;
		}

		Node(int userdata) {

			Initialize(userdata);
		}
		Node() {

			Initialize(rand() % 9 + 1);
		}

		friend ostream& operator<<(ostream& out, const Node& point) {
			
			out << point.data;
			return out;
		}
		friend istream& operator>>(istream& in, Node& point) {

			point.sum -= point.data;

			in >> point.data;
			point.sum += point.data;
			point.average = float(point.sum) / point.quantity;

			return in;
		}

		Node& operator[](int column) {
			Node* node = this;
			for (int i = 0; i < column; i++) {
				node = node->right;
			}
			return *node;
		}
	};

	Node* head = 0, * tail = 0, * now = 0, * prev = 0, * head_row = 0, * head_column = 0, * up = 0;
	int size_row = 0, size_column = 0, for_fast = 0;

	void const ForPrint(Node* head_what, Node* head_or_tail, int size_what, char head_or_tail_direction, char now_direction, int number) {

		int local_sum = 0, local_quantity = 0;
		float local_average = 0;
	 
		head_what = head_or_tail;

		for (int i = 0; i < number - 1; i++) {

			switch (head_or_tail_direction)
			{
			case 'r' :
				head_what = head_what->right;
				break;
			case 'l':
				head_what = head_what->left;
				break;
			case 't':
				head_what = head_what->top;
				break;
			case 'b':
				head_what = head_what->bottom;
				break;
			default:
				break;
			}
		}

		now = head_what;
		for (int j = 0; j < size_what; j++) {

			cout << *now << ' ';

			local_sum += now->data;
			local_quantity++;

			switch (now_direction)
			{
			case 'r':
				now = now->right;
				break;
			case 'l':
				now = now->left;
				break;
			case 't':
				now = now->top;
				break;
			case 'b':
				now = now->bottom;
				break;
			default:
				break;
			}
		}
		local_average = (float)local_sum / local_quantity;

		cout << endl << "Сума: " << local_sum << endl << "Кількість комірок: " << local_quantity << endl << "Середне значеняя:  " << local_average << endl;
	}

	void ForPop(int number, int qmas[], int size, Node* h_equal, Node* t_equal, char n_equal, int size_what, int n_not_equal_1, int n_not_equal_2, char direction_1, char direction_2, char now_direction) {
		Node* temp;
		now = head;

		for (int i = 0; i < Node::Size_row_column; i++) {

			if (qmas[i] == number) {
				qmas[i] = -1;

				for (int j = 0; j < i; j++) {
					if (qmas[j] > number) qmas[j]--;
				}
				break;
			}
			else continue;
		}

		if (number == 0) head = h_equal;
		else if (number == size - 1) tail = t_equal;

		for (int i = 0; i < number; i++) {

			if (n_equal == 'b') now = now->bottom;
			else if (n_equal == 'r')now = now->right;
		}

		for (int j = 0; j < size_what; j++) {

			if (number != n_not_equal_1) {

				if (direction_1 == 't') now->bottom->top = now->top;
				else if (direction_1 == 'r')now->left->right = now->right;
			}
			if (number != n_not_equal_2) {

				if (direction_2 == 'b') now->top->bottom = now->bottom;
				else if (direction_2 == 'l') now->right->left = now->left;
			}

			temp = now;
			if (now_direction == 'r')now = now->right;
			else if (now_direction == 'b')now = now->bottom;

			Node::sum -= temp->data;
			Node::quantity--;

			delete temp;
		}
		Node::average = float(Node::sum) / Node::quantity;
	}
	
	void do_1(int row) {
		now = tail;
		for (int i = 0; i < size_row - row - 1; i++) {
			now = now->top;
		}
	}
	void do_2(int row) {
		now = head;

		for (int i = 0; i < row; i++) {
			now = now->bottom;
		}
	}

public:

	Matrix(int user_size_row = 2, int user_size_column = 2, bool automatic_initialization = true) {

		int userdata = 0;
		int row = 0, column = 0;
		size_row = user_size_row;
		size_column = user_size_column;

		for (int i = 0; i < size_row; i++) {

			Node::qrow[i] = i;

			for (int j = 0; j < size_column; j++) {

				Node::qcolumn[j] = j;

				if (!automatic_initialization) {
					cout << "Введіть значення комірки " << i << ' ' << j << " : ";
					cin >> userdata;
				}
				else userdata = rand() % 9 + 1;

				if (i == 0) {
					if (j == 0) {
						now = new Node(userdata);
						head_row = now;
						head = now;
					}
					else {
						now->right = new Node(userdata);
						prev = now;
						now = prev->right;
						now->left = prev;
					}
				}
				else {
					if (j == 0) {

						now = new Node(userdata);
						now->top = head_row;
						up = head_row->right;
						head_row->bottom = now;
						head_row = now;
					}
					else {
						now->right = new Node(userdata);
						prev = now;
						now = prev->right;
						now->left = prev;
						now->top = up;
						up->bottom = now;
						up = up->right;
					}
				}
				Node::index_column++;
			}
			Node::index_column = 0;
			Node::index_row++;
		}
		tail = now;
	}
	~Matrix() {

		Node* temp;
		now = head;
		head_row = head;

		for (int i = 0; i < size_row; i++) {
			head_row = head_row->bottom;

			for (int j = 0; j < size_column; j++) {

				temp = now;
				now->left = 0;
				if(i != size_row-1) now->bottom->top = 0;			
				now->bottom = 0;
				now = now->right;

				delete temp;
			}
			now = head_row;
		}
	}

	void const Print() {

		cout << *this << endl << "Сума: " << Node::sum << endl << "Кількість комірок: " << Node::quantity << endl << "Середне значеняя:  " << Node::average << endl;
	}

	void const Filter(int multiple) {

		head_row = head;
		int local_sum = 0, local_quantity = 0;
		float local_average = 0;

		for (int i = 0; i < size_row; i++) {

			now = head_row;
			head_row = head_row->bottom;

			for (int j = 0; j < size_column; j++) {

				if (now->data % multiple == 0) {
					cout << *now << ' ';
					local_sum += now->data;
					local_quantity++;
				}
				else cout << ". ";

				now = now->right;
			}
			cout << endl;
		}
		local_average = (float)local_sum / local_quantity;

		cout << endl << "Сума: " << local_sum << endl << "Кількість комірок: " << local_quantity << endl << "Середне значеняя:  " << local_average << endl;
	}

	bool const PrintRow(int number) {

		if (number > size_row || number < 0) return false;

		ForPrint(head_row, head, size_column, 'b', 'r', number + 1);
	}

	bool const PrintColumn(int number) {

		if (number > size_column || number < 0) return false;

		ForPrint(head_column, head, size_row, 'r', 'b', number + 1);
	}

	bool const ReversePrintRow(int number) {

		if (number > size_row || number < 0) return false;

		ForPrint(head_row, tail, size_column, 't', 'l', size_row - number);
	}

	bool const ReversePrintColumn(int number) {

		if (number > size_column || number < 0) return false;

		ForPrint(head_column, tail, size_row, 'l', 't', size_column - number);
	}

	bool PopRow(int number) {

		if (number > size_row - 1 || number < 0 || size_row < 3) return false;

		
		ForPop(number, Node::qrow, size_row, head->bottom, tail->top, 'b', size_column, size_row - 1, 0, 't', 'b', 'r');
		size_row--;

		
	}

	bool PopColumn(int number) {

		if (number > size_row - 1|| number < 0 || size_column < 3) return false;

		ForPop(number, Node::qcolumn, size_column, head->right, tail->left, 'r', size_row, 0, size_column - 1, 'r', 'l','b');

		size_column--;
	}

	bool PushRow(int number){

		if (number > size_row - 1 || number -1 < 0 || size_row > 10) return false;

		for (int i = 0; i < Node::Size_row_column; i++) {

			if (Node::qrow[i] == -1) {
				Node::qrow[i] = number;
				Node::index_row = i;	
				break;
			}
			else continue;
		}
		for (int j = 0; j < Node::Size_row_column; j++) {
			if (Node::qrow[j] >= number) Node::qrow[j]++;
		}

		Node* temp;
		now = head;

		for (int i = 0; i < number - 1; i++) now = now->bottom;

		temp = now->bottom;
		now->bottom = new Node;
		up = now->right;
		now = now->bottom;
		now->bottom = temp;
		temp = temp->right;
		Node::sum += now->data;

		for (int j = 0; j <= size_column - 1; j++) {

			for (int i = 0; i < Node::Size_row_column; i++) {
				if (Node::qcolumn[i] == j) {
					now->column = &Node::qcolumn[i];
					break;
				}
				else continue;
			}
			if (j == size_column - 1) break;
			prev = now;
			now->right = new Node;
			now = prev->right;
			now->left = prev;
			now->top = up;
			up->bottom = now;
			up = up->right;
			now->bottom = temp;
			temp->top = now;
			temp = temp->right;

			Node::sum += now->data;
		}
		Node::average = float(Node::sum) / Node::quantity;
		size_row++;
	}

	bool PushColumn(int number){

		if (number > size_column - 1 || number < 0 || size_column > 10) return false;

		for (int i = 0; i < Node::Size_row_column; i++) {
			if (Node::qcolumn[i] == -1) {
				Node::qcolumn[i] = number;
				Node::index_column = i;
				for (int j = 0; j < i; j++) {
					if (Node::qcolumn[j] >= number) Node::qcolumn[j]++;
				}
				break;
			}
			else continue;
		}

		Node* temp;
		now = head;

		for (int i = 0; i < number - 1; i++) now = now->right;

		temp = now->right;
		prev = now;
		now->right = new Node;
		now = now->right;
		now->left = prev;
		now->right = temp;
		temp->left = now;

		Node::sum += now->data;

		for (int j = 0; j < size_row - 1; j++) {

			for (int i = 0; i < Node::Size_row_column; i++) {
				if (Node::qrow[i] == j) {
					now->row = &Node::qrow[i];
					break;
				}
				else continue;
			}
			prev = now;
			now->bottom = new Node;
			now = now->bottom;
			now->top = prev;
			now->left = prev->left->bottom;
			now->right = prev->right->bottom;
			now->left->right = now;
			now->right->left = now;

			Node::sum += now->data;
		}
		Node::average = float(Node::sum) / Node::quantity;
		size_column++;
	}

	void static Info(){
		cout << "Автор: Шаронова Вероніка \nГрупа: ОПК-311 \nРік: 2023 \nМета: здобути досвід написання прикладних програм \nОпис: программа дозволяє бвзово керувати імітацією матриці. Серед можливостей: створення матриці, ручна та автоматична ініціалізація елементів, видалення та створення колонок та рядків, вивід на екран даних окремо або разом, т.д. ";
	}

	Node Find(int row, int column) {

		if (row > size_row / 2 && column > size_column / 2) {
			do_1(row);
		}
		else if(row <= size_row / 2 && column <= size_column / 2) {
			do_2(row);
		}
		else {
			if (size_row >= size_column) {
				do_2(row);
			}
			else {
				
				do_1(row);
			}
		}
		
		if (now->left == 0) {
			for (int i = 0; i < column; i++) {
				now = now->right;
			}
		}
		else if (now->right == 0) {
			for (int i = 0; i < size_column - column - 1; i++) {
				now = now->left;
			}
		}
		
		return *now;
	}

	void Pe(int row, int column) {

		Node temp = Find(row, column);
		cout << temp << endl << "Row: " << *temp.row << endl << "Column: " << *temp.column;
	}

	int GetSizeRow() {
		return size_row;
	}

	int GetSizeColumn() {
		return size_column;
	}

	Node& operator[](int row) {
		now = head;
		for (int i = 0; i < row; i++) {
			now = now->bottom;
		}
		return *now;
	}

	friend ostream& operator<<(ostream& out, Matrix& point) {
		point.head_row = point.head;

		for (int i = 0; i < point.size_row; i++) {

			point.now = point.head_row;
			point.head_row = point.head_row->bottom;

			for (int j = 0; j < point.size_column; j++) {

				out << *point.now << ' ';
				point.now = point.now->right;
			}
			out << endl;
		}
		return out;
	}

};
int Matrix::Node::quantity = 0;
float Matrix::Node::average = 0;
int Matrix::Node::sum = 0;
int Matrix::Node::qrow[Size_row_column]{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
int Matrix::Node::qcolumn[Size_row_column]{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
int Matrix::Node::index_row = 0;
int Matrix::Node::index_column = 0;

void main() {

	//setlocale(LC_ALL, "UKR");
	system("chcp 1251");
	system("cls");
	srand(time(0));
	
	int temp_choice, size_row, size_column, choice, row, column, data;

	cout << "Вітаю! Ця програма дозвлить вам спробувати покерувати двовимірним списоком. Його буде створенно пілся того, як ви оберете тип ініціалізації (0 - вручну, 1 - автоматично) та розмір матриці. Будьте уважні, на розмір накладено обмеження. Якщо ви введете некоректні дані, то программа запитає їх ще раз.\n";
	
	do {
		cout << "Оберіть тип ініціалізації: ";
		cin >> temp_choice;
	} while (temp_choice != 1 && temp_choice != 0);
	
	do {
		cout << "Оберіть кількість рядків (не меньш 2 та не більщ 10): ";
		cin >> size_row;
	} while (size_row > 10 || size_row < 2);

	do {
		cout << "Оберіть кількість стовпчиків (не меньш 2 та не більщ 10): ";
		cin >> size_column;
	} while (size_column > 10 || size_column < 2);

	Matrix matrix(size_row, size_column, temp_choice);
	
	do {
		system("cls");
		cout << matrix << endl;

		cout << "Ви можете зробити наступне: \n1 - вивести повну інформацію про матрицю\n2 - вивести певний елемент\n3 - вивести певний рядок\n4 - вивести певний стовпчик\n5 - відфільтрувати лише кратні якомусь числу елементи\n6 - змінити значення елементу\n7 - додати рядок\n8 - додати стовпчик\n9 - видалити рядок\n10 - видвлити стовпчик\n11 - вивести коротку інформацію про автора та роботу";
		
		do {
			cout << "\nОберіть дію: ";
			cin >> choice;
		} while (choice < 1 || choice > 12);

		cout << endl;

		switch (choice)
		{
		case 1:
			matrix.Print();
			break;
		case 2:
			do{
				cout << "Введіть номер рядку: ";
				cin >> row;
				cout << "Введіть номер стовпчику: ";
				cin >> column;
				cout << endl;

			} while (row > size_row || row < 1 || column > size_column || column < 1);
			cout << "Елемент: " << matrix[row - 1][column - 1];

			break;
		case 3:
			do {
				cout << "Оберіть номер рядку: ";
				cin >> row;
				cout << "Оберіть порядок виводу (1 - звичайний; 0 - зворотній): ";
				cin >> temp_choice;
				cout << endl;
			} while (row < 1 || row > size_row || temp_choice != 0 && temp_choice != 1);

			if (temp_choice) matrix.PrintRow(row-1);
			else matrix.ReversePrintRow(row-1);
			break;
		case 4:
			do {
				cout << "Оберіть номер стовпчику: ";
				cin >> column;
				cout << "Оберіть порядок виводу (1 - звичайний; 0 - зворотній): ";
				cin >> temp_choice;
				cout << endl;
			} while (column < 1 || column > size_column || temp_choice != 0 && temp_choice != 1);

			if (temp_choice) matrix.PrintColumn(column - 1);
			else matrix.ReversePrintColumn(column - 1);
			break;
		case 5:
			cout << "Оберіть число якому повинні бути кратні елементи: ";
			cin >> temp_choice;
			matrix.Filter(temp_choice);
			break;
		case 6:
			do {
				cout << "Введіть номер рядку: ";
				cin >> row;
				cout << "Введіть номер стовпчику: ";
				cin >> column;
				cout << endl;

			} while (row > size_row || row < 1 || column > size_column || column < 1);
			cout << "Введіть нове значення елементу: ";
			cin >> matrix[row - 1][column - 1];
			cout << endl << "Елемент: " << matrix[row - 1][column - 1];
			break;
		case 7:
			if (matrix.GetSizeRow() > 9) {
				cout << "Список переповнено!";
				break;
			}
			else {
				do {
					cout << "Введіть номер рядку: ";
					cin >> data;
					cout << endl;
				} while (!matrix.PushRow(data-1));
			}
			cout << endl;
			break;
		case 8:
			if (matrix.GetSizeColumn() > 9) {
				cout << "Список переповнено!";
				break;
			}
			else {
				do {
					cout << "Введіть номер стовпчику: ";
					cin >> data;
					cout << endl;
				} while (!matrix.PushColumn(data-1));
			}
			cout << endl;
			break;
		case 9:
			if (matrix.GetSizeRow() < 3) {
				cout << "Список занадто малий!";
				break;
			}
			else {
				do {
					cout << "Введіть номер рядку: ";
					cin >> data;
					cout << endl;
				} while (!matrix.PopRow(data-1));
			}
			cout << endl;
			break;
		case 10:
			if (matrix.GetSizeColumn() < 3) {
				cout << "Список занадто малий!";
				break;
			}
			else {
				do {
					cout << "Введіть номер стовпчику: ";
					cin >> data;
					cout << endl;
				} while (!matrix.PopColumn(data - 1));
			}
			cout << endl;
			break;
		case 11:
			Matrix::Info();
			cout << endl;
			break;
		case 12:
			do {
				cout << "Введіть номер рядку: ";
				cin >> row;
				cout << "Введіть номер стовпчику: ";
				cin >> column;
				cout << endl;

			} while (row > size_row || row < 1 || column > size_column || column < 1);
			matrix.Pe(row, column);
			cout << endl;
			break;
		default:
			break;
		}
		cout << endl << "Натисність будь-яку клавішу, щоб продовжити, або Esc, щоб вийти...";
	} while (_getch() != 27);
	
}
